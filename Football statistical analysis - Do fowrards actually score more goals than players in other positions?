{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1b5e19aa",
   "metadata": {},
   "source": [
    "Statistical analysis conducted to see, if fowards do score more goals that other players in football. <br>\n",
    "Data scraped from fbref"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6e4e044b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing libaries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4ed89339",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r'C:\\Users\\igors\\Desktop\\Data Science\\2020-2021 player stats.csv', index_col=0)\n",
    "players = df['1_Player']\n",
    "df = df[players != 'Player']\n",
    "df['Performance_Gls'] = df['Performance_Gls'].astype('int64')\n",
    "df['Performance_Gls'] = df.groupby('1_Player')['Performance_Gls'].transform('sum')\n",
    "df = df.drop_duplicates(subset='1_Player')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b1c02307",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1_Player</th>\n",
       "      <th>3_Pos</th>\n",
       "      <th>Performance_Gls</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Patrick van Aanholt</td>\n",
       "      <td>DF</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tammy Abraham</td>\n",
       "      <td>FW</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Che Adams</td>\n",
       "      <td>FW</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Tosin Adarabioyo</td>\n",
       "      <td>DF</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adrián</td>\n",
       "      <td>GK</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>598</th>\n",
       "      <td>Yoel</td>\n",
       "      <td>GK</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>600</th>\n",
       "      <td>Joseba Zaldúa</td>\n",
       "      <td>DF</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>601</th>\n",
       "      <td>Oier Zarraga</td>\n",
       "      <td>MF</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>602</th>\n",
       "      <td>Igor Zubeldia</td>\n",
       "      <td>DF</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>603</th>\n",
       "      <td>Martín Zubimendi</td>\n",
       "      <td>MF</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2698 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                1_Player 3_Pos  Performance_Gls\n",
       "0    Patrick van Aanholt    DF                0\n",
       "1          Tammy Abraham    FW                6\n",
       "2              Che Adams    FW                9\n",
       "3       Tosin Adarabioyo    DF                0\n",
       "4                 Adrián    GK                0\n",
       "..                   ...   ...              ...\n",
       "598                 Yoel    GK                0\n",
       "600        Joseba Zaldúa    DF                0\n",
       "601         Oier Zarraga    MF                0\n",
       "602        Igor Zubeldia    DF                1\n",
       "603     Martín Zubimendi    MF                0\n",
       "\n",
       "[2698 rows x 3 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "262da8df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['DF', 'FW', 'GK', 'FW,MF', 'DF,FW', 'MF', 'MF,FW', 'MF,DF',\n",
       "       'DF,MF', 'FW,DF', 'GK,MF'], dtype=object)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['3_Pos'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "0a05afd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df['3_Pos'] != 'GK']\n",
    "df = df[df['3_Pos'] != 'GK,MF']\n",
    "fw_cols = ['FW','FW,MF']\n",
    "rest_cols = ['DF','MF','MF,FW','DF,MF','MF,DF','FW,DF']\n",
    "forwards = df.loc[df['3_Pos'].isin(fw_cols)]\n",
    "rest = df.loc[df['3_Pos'].isin(rest_cols)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2fbc5b1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(x=forwards['Performance_Gls'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "45e5c1c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(x=rest['Performance_Gls'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ebac9195",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Man-Whitney test statistic: 333495.0\n",
      "p_value: 1.3179308431448974e-65\n"
     ]
    }
   ],
   "source": [
    "#Goals are not normally distrbuted, so I'll use Mann-Whitney U test\n",
    "from scipy.stats import mannwhitneyu\n",
    "mw_u, p = mannwhitneyu(forwards['Performance_Gls'], rest['Performance_Gls'])\n",
    "print(f'Man-Whitney test statistic: {mw_u}')\n",
    "print(f'p_value: {p}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcd51fc8",
   "metadata": {},
   "source": [
    "P value from Mann-Whitney test is almost 0, which means that the null hypothesis stating that means are equal is rejected. <br>\n",
    "At 5 % signifficance, forwards do score more goals than players in other positions."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
